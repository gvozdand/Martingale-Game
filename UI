import tkinter as t
import requests
from PIL import Image, ImageTk
from io import BytesIO
from IPython.display import display, Math
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
from Martingale_Game_Functions import player_mart_game





class main_window:
    
    def __init__(self, subtitle, textbox):
        
        self.subtitle = subtitle
        self.textbox = textbox
        
        #Saving Widgets for Later
        self.root = None
        self.label = None
        self.t_image = None
        self.w_subtitle = None
        self.w_textbox = None
        
    def window_creation(self):
        
        #Window Title
        self.root = t.Tk()
        self.root.title("Martingale Game")
        self.root.configure(bg="red")
        
        #Setting Window Dimensions
        screen_w = self.root.winfo_screenwidth()
        screen_h = self.root.winfo_screenheight()
        self.root.geometry(f"{screen_w}x{screen_h}")

    def text_creation(self): 
        #Main Title
        self.w_subtitle = t.Label(self.root, text = self.subtitle, font =("Times New Roman", 18))
        self.w_subtitle.pack(padx = 20, pady = 20)

        #Textbox
        self.w_texbox = t.Text(self.root, height = 5, width = 69, font = ("Times New Roman", 18))
        self.w_texbox.insert(t.END, self.textbox)
        self.w_texbox.pack(padx = 20, pady = 20)

    def image_creation(self):
        #Roulette Wheel Image
        rsp = requests.get("https://media.assettype.com/bettorsinsider%2F2024-01%2F0df27bfd-76bd-415f-800e-0261840c9499%2Ffree_walking_tour_salzburg_WLNdV3xC_fI_unsplash__1_.jpg?w=480&auto=format%2Ccompress&fit=max")
        image = Image.open(BytesIO(rsp.content))
        self.t_image = ImageTk.PhotoImage(image)
        self.label = t.Label(self.root, image=self.t_image)
        self.label.pack(padx = 20, pady = 20)
        
    def button_creation(self):
        #Next Arrow
        self.next_button = t.Button(self.root,  text = "Next", padx=100, pady=100, bg="black", fg="white", command=self.root.destroy)
        self.next_button.pack(padx=100, pady = 100)
    
    def end(self):
        self.root.destroy()
        
    def run(self):
        self.window_creation()
        self.text_creation()
        self.image_creation()
        self.button_creation()
        self.root.mainloop()
        
class explanation_window(main_window):
    def __init__(self, subtitle, textbox, second_textbox):
        super().__init__(subtitle, textbox)
        
        self.second_textbox = second_textbox
        
        #Widget for Later
        self.w_second_textbox = None
        
    def image_creation(self):
        return
    def latex_coder(self, expression: str, root):
        LTX_code = expression
        LTX_fig = plt.Figure(figsize=(4,1.5))
        LTX_ax = LTX_fig.add_subplot(111)
        LTX_ax.text(0.5,0.5, LTX_code, fontsize=18, ha="center", va="center")
        LTX_ax.axis("off")
        LTX_canvas = FigureCanvasTkAgg(LTX_fig, master = root)
        LTX_canvas.get_tk_widget().pack()
        LTX_canvas.draw()
        
    def button_creation(self):
        #Next Arrow
        self.next_button = t.Button(self.root,  text = "Next", padx=5, pady=5, bg="black", fg="white", command=self.root.destroy)
        self.next_button.pack(padx=5, pady = 5)
        
    def second_text_box(self):
        self.w_second_textbox = t.Text(self.root, height = 5, width = 69, font = ("Times New Roman", 18))
        self.w_second_textbox.insert(t.END, self.second_textbox)
        self.w_second_textbox.pack(padx = 20, pady = 20)
        
    def run(self):
        self.window_creation()
        self.text_creation()
        self.image_creation()
        self.latex_coder("$E(W) = M(1-(2p)^n)$", self.root)
        self.latex_coder("$E(N) = M*E(m)$", self.root)
        self.latex_coder("$E(m) = \\frac{1}{1-p}$", self.root)
        self.second_text_box()
        self.button_creation()
        self.root.mainloop()

class first_action_window(main_window):
    def __init(self, subtitle, textbox):
        super().__init__(subtitle, textbox)
    def image_creation(self):
        return
    def entry_box_creation(self):
        self.entry_box_one = t.Entry(self.root, height = 2, width = 30)
    def run(self):
        self.window_creation()
        self.text_creation()
        self.image_creation()
        self.second_text_box()
        self.entry_box_creation()
        self.button_creation()
        self.root.mainloop()
    
        
        
first = main_window("Martingale Game", "Hey there! This is a game designed to showcase the martingale strategy for playing the classic casino game of roulette. There are a few options to view how the strategy works. Click the next button to proceed!")
first.run()

second = explanation_window("How does the Martingale System work?", "The Martingale Strategy is simple. Bet some amount on a game of roulette, either on red of black. If you win, continue betting on the same color. If you lose, double the bet size and bet again on the same color. The degree of consistency exists due to the roughly binomial distribution this follows. Of course, American roulette involves a green color that shifts the odds of winning to roughly 47% when betting solely red or black. Although there will be losses, or even streaks of losing, the doubling of the bet recoups losses and adds profits. To combat this strategy, casinos employ a max bet size. In a sense, this strategy allows players to guarentee a win. However, players must have a substantial amount of funds and play reasonably far from the max bet size.", "The mathematical formalism can be found above. E(W) are the expected winnings, where M represents the number of Martingale rounds, p denotes the probability of losing, and n is the numbers of coups (spins necessary to achieve first Martingale win). E(N) is the expected value of coups.")
second.run()

third = first_action_window("Yuh", "Yuh Yuh")
third.run()
